@*
    ResetModal.razor is a component that displays a modal with checkboxes to reset settings.
    It is used in the Settings page to reset the application to its default state.
*@

@using MaintenanceLog.Data.Entities
@using MaintenanceLog.Data.Services.Contracts

@inject IAssetService AssetService
@inject IAreaService AreaService
@inject IPropertyService PropertyService
@inject ITaskTypeService TaskTypeService
@* @inject ITaskService TaskService *@

<button class="btn btn-danger" @onclick="OpenModal">
    Reset Settings
</button>

@if (isModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close" @onclick="CloseModal">&times;</span>
            <p>Choose settings to reset:</p>

            <input type="checkbox" @bind="resetTaskTypes">
            <label for="setting1"> Task Types</label><br>

            <input type="checkbox" @bind="resetProperties">
            <label for="setting5"> Properties</label><br>

            <input type="checkbox" @bind="resetAreas">
            <label for="setting4"> Areas</label><br>

            <input type="checkbox" @bind="resetAssets">
            <label for="setting3"> Assets</label><br>

            <input type="checkbox" @bind="resetTasks">
            <label for="setting2"> Tasks</label><br>

            <button class="btn btn-danger" @onclick="ResetSettings">
                Reset
            </button>
        </div>
    </div>
}

<style>

    .modal {
        display: block; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Could be more or less, depending on screen size */
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

</style>

@code {
    private bool isModalOpen = false;
    private bool resetTaskTypes = false;
    private bool resetTasks = false;
    private bool _resetAssets = false;
    private bool _resetAreas = false;
    private bool _resetProperties = false;

    bool resetProperties
    {
        get => _resetProperties;
        set
        {
            _resetProperties = value;
            if (value)
            {
                resetTasks = true;
                resetAssets = true;
                resetAreas = true;
            }
        }
    }

    bool resetAreas
    {
        get => _resetAreas;
        set
        {
            _resetAreas = value;
            if (value)
            {
                resetTasks = true;
                resetAssets = true;
            }
        }
    }

    bool resetAssets
    {
        get => _resetAssets;
        set
        {
            _resetAssets = value;
            if (value)
            {
                resetTasks = true;
            }
        }
    }

    void OpenModal()
    {
        isModalOpen = true;
    }

    void CloseModal()
    {
        isModalOpen = false;
    }

    private async Task ResetSettings()
    {
        if (resetTasks)
        {
            // Reset tasks
            // TODO
        }

        if (resetTaskTypes)
        {
            // Reset task types
            var taskTypes = await TaskTypeService.GetAsync();
            foreach (var taskType in taskTypes)
            {
                await TaskTypeService.DeleteAsync(taskType);
            }

            var defaultTaskTypes = new List<TaskType>
            {
                new TaskType() { Name = "Unassigned" },
                new TaskType() { Name = "Chore" },
                new TaskType() { Name = "Repair" },
                new TaskType() { Name = "Maintain" },
                new TaskType() { Name = "Clean" },
            };

            foreach (var newTaskType in defaultTaskTypes)
            {
                await TaskTypeService.AddAsync(newTaskType);
            }

            // if (!resetTasks)
            // {
            //     var tasks = await TaskService.GetAsync();
            //     foreach (var task in tasks)
            //     {
            //         task.TaskType = taskTypes.First(tt => tt.Name == "Unassigned");
            //         await TaskService.UpdateAsync(task);
            //     }
            // }
        }

        if (resetAssets)
        {
            // Reset assets
            var assets = await AssetService.GetAsync();
            foreach (var asset in assets)
            {
                await AssetService.DeleteAsync(asset);
            }
        }

        if (resetAreas)
        {
            // Reset areas
            var areas = await AreaService.GetAsync();
            foreach (var area in areas)
            {
                await AreaService.DeleteAsync(area);
            }
        }

        if (resetProperties)
        {
            // Reset properties
            var properties = await PropertyService.GetAsync();
            foreach (var property in properties)
            {
                await PropertyService.DeleteAsync(property);
            }
        }

        isModalOpen = false;
    }
}
