@*
    ResetModal.razor is a component that displays a modal with checkboxes to reset settings.
    It is used in the Settings page to reset the application to its default state.
*@

@using MaintenanceLog.Data.Entities
@using MaintenanceLog.Data.Services.Contracts
@using System.Linq

@inject IAssetService AssetService
@inject IAreaService AreaService
@inject IPropertyService PropertyService
@inject ITaskTypeService TaskTypeService
@inject ITaskDefinitionService TaskDefinitionService

<button class="btn btn-danger" @onclick="OpenModal">
    Reset Settings
</button>

@if (isModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close" @onclick="CloseModal">&times;</span>
            <p>Choose settings to reset:</p>

            <input type="checkbox" @bind="resetTaskTypes">
            <label for="setting1"> Task Types</label><br>

            <input type="checkbox" @bind="resetProperties">
            <label for="setting5"> Properties</label><br>

            <input type="checkbox" @bind="resetAreas">
            <label for="setting4"> Areas</label><br>

            <input type="checkbox" @bind="resetAssets">
            <label for="setting3"> Assets</label><br>

            <input type="checkbox" @bind="resetTaskDefinitions">
            <label for="setting2"> Tasks</label><br>

            <button class="btn btn-danger" @onclick="ResetSettings">
                Reset
            </button>
        </div>
    </div>
}

<style>

    .modal {
        display: block; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Could be more or less, depending on screen size */
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

</style>

@code {
    [Parameter]
    public EventCallback OnReset { get; set; }

    private bool isModalOpen = false;
    private bool resetTaskTypes = false;
    private bool resetTaskDefinitions = false;
    private bool _resetAssets = false;
    private bool _resetAreas = false;
    private bool _resetProperties = false;

    bool resetProperties
    {
        get => _resetProperties;
        set
        {
            _resetProperties = value;
            if (value)
            {
                resetTaskDefinitions = true;
                resetAssets = true;
                resetAreas = true;
            }
        }
    }

    bool resetAreas
    {
        get => _resetAreas;
        set
        {
            _resetAreas = value;
            if (value)
            {
                resetTaskDefinitions = true;
                resetAssets = true;
            }
        }
    }

    bool resetAssets
    {
        get => _resetAssets;
        set
        {
            _resetAssets = value;
            if (value)
            {
                resetTaskDefinitions = true;
            }
        }
    }

    void OpenModal()
    {
        isModalOpen = true;
    }

    void CloseModal()
    {
        isModalOpen = false;
    }

    private async Task ResetSettings()
    {
        if (resetTaskDefinitions)
        {
            // Reset tasks
            var taskDefinitions = await TaskDefinitionService.GetAsync();
            foreach (var taskDefinition in taskDefinitions)
            {
                await TaskDefinitionService.DeleteAsync(taskDefinition);
            }
        }

        if (resetTaskTypes)
        {
            // Reset task types
            var defaultTaskTypeName = "Unassigned";
            var defaultTaskTypes = new List<TaskType>
            {
                new TaskType() { Name = defaultTaskTypeName },
                new TaskType() { Name = "Chore" },
                new TaskType() { Name = "Repair" },
                new TaskType() { Name = "Maintain" },
                new TaskType() { Name = "Clean" },
            };

            var taskTypes = await TaskTypeService.GetAsync();
            foreach (var taskType in taskTypes.Where(tt => !defaultTaskTypes.Any(dtt => dtt.Name == tt.Name)))
            {
                await TaskTypeService.DeleteAsync(taskType);
            }

            // Add missing task types, only delete the non-default ones. 
            // If any task definitions are using a non-default task type, set them to the default task type.

            taskTypes = await TaskTypeService.GetAsync();

            foreach (var newTaskType in defaultTaskTypes.Where(dtt => !taskTypes.Any(tt => tt.Name == dtt.Name)))
            {
                await TaskTypeService.AddAsync(newTaskType);
            }

            if (!resetTaskDefinitions)
            {
                var defaultTaskType = (await TaskTypeService.GetAsync()).First(tt => tt.Name == defaultTaskTypeName);
                var taskDefinitions = await TaskDefinitionService.GetAsync();
                foreach (var taskDefinition in taskDefinitions.Where(td => !taskTypes.Any(tt => tt.Id == td.TaskTypeId)))
                {
                    taskDefinition.TaskTypeId = defaultTaskType.Id;
                    await TaskDefinitionService.UpdateAsync(taskDefinition);
                }
            }
        }

        if (resetAssets)
        {
            // Reset assets
            var assets = await AssetService.GetAsync();
            foreach (var asset in assets)
            {
                await AssetService.DeleteAsync(asset);
            }
        }

        if (resetAreas)
        {
            // Reset areas
            var areas = await AreaService.GetAsync();
            foreach (var area in areas)
            {
                await AreaService.DeleteAsync(area);
            }
        }

        if (resetProperties)
        {
            // Reset properties
            var properties = await PropertyService.GetAsync();
            foreach (var property in properties)
            {
                await PropertyService.DeleteAsync(property);
            }
        }

        if (OnReset.HasDelegate)
        {
            await OnReset.InvokeAsync();
        }

        isModalOpen = false;
    }
}
