@page "/settings/task-types/{TaskTypeId:int}"

@using MaintenanceLog.Data.Entities
@using MaintenanceLog.Data.Services.Contracts
@using Microsoft.AspNetCore.Authorization

@inject ITaskTypeService TaskTypeService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Edit Task Type</PageTitle>

<MenuBreadcrumbs Breadcrumbs=@Breadcrumbs />
<br />

@if (taskType is not null)
{
    <EditForm Model="@taskType" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" class="form-control" @bind-Value="taskType.Name" />
        </div>

        <!-- TODO: icon? -->

        <br />

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    [Parameter]
    public int TaskTypeId { get; set; }

    private TaskType? taskType = null;

    private string taskTypeName => taskType?.Name ?? "Task Type";

    private List<(string, string?)> Breadcrumbs =>
    [
        ("Settings", "/settings"),
        (taskTypeName, null)
    ];

    protected override async Task OnInitializedAsync()
    {
        taskType = await TaskTypeService.FindAsync(TaskTypeId);
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (taskType is null)
        {
            return;
        }
        var updatedTaskType = await TaskTypeService.UpdateAsync(taskType);
        if (updatedTaskType is not null)
        {
            NavigationManager.NavigateTo($"/settings");
        }
    }
}
