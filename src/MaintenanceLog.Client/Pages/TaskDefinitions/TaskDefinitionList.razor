@page "/task-definitions"

@using MaintenanceLog.Client.Components.TaskDefinitions
@using MaintenanceLog.Data.Entities
@using MaintenanceLog.Data.Services.Contracts

@inject ITaskDefinitionService TaskDefinitionService
@inject IAssetService AssetService
@inject IAreaService AreaService
@inject NavigationManager NavigationManager

<PageTitle>Task Definitions</PageTitle>

<h3>Task Definitions</h3>


<!-- Filter Dropdowns -->
@if (areas is not null)
{
<div class="form-group">
    <label for="assetFilter">Filter by Asset</label>
    <InputSelect id="assetFilter" class="form-control" @bind-Value="@assetFilter">
        <option value="">All</option>
        @foreach (var asset in assets)
        {
            <option value="@asset.Id">@asset.Name</option>
        }
    </InputSelect>
</div>
}
else
{
    <p><em>Loading...</em></p>
}

@if (areas is not null)
{
<div class="form-group">
    <label for="areaFilter">Filter by Area</label>
    <InputSelect id="areaFilter" class="form-control" @bind-Value="@areaFilter">
        <option value="">All</option>
        @foreach (var area in areas)
        {
            <option value="@area.Id">@area.Name</option>
        }
    </InputSelect>
</div>
}
else
{
    <p><em>Loading...</em></p>
}

<button class="btn btn-primary" @onclick="ResetPage">Clear Filters</button>

<TaskDefinitionGrid AreaId="areaFilter" AssetId="assetFilter" />

@code {

    private List<TaskDefinition>? taskDefinitions;
    private List<Asset>? assets;
    private List<Area>? areas;
    private int? assetFilter;
    private int? areaFilter;

    protected override async Task OnInitializedAsync()
    {
        assets = await AssetService.GetAsync();
        areas = await AreaService.GetAsync();
    }

    private async Task ResetPage()
    {
        assetFilter = null;
        areaFilter = null;
    }
}