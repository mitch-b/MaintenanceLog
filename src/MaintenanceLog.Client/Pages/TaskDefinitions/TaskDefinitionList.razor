@page "/task-definitions"

@using MaintenanceLog.Data.Entities
@using MaintenanceLog.Data.Services.Contracts

@inject ITaskDefinitionService TaskDefinitionService
@inject IAssetService AssetService
@inject IAreaService AreaService
@inject NavigationManager NavigationManager

<h3>Task Definitions</h3>


<!-- Filter Dropdowns -->
@if (areas is not null)
{
<div class="form-group">
    <label for="assetFilter">Filter by Asset</label>
    <InputSelect id="assetFilter" class="form-control" @bind-Value="@assetFilter">
        <option value="">All</option>
        @foreach (var asset in assets)
        {
            <option value="@asset.Id">@asset.Name</option>
        }
    </InputSelect>
</div>
}
else
{
    <p><em>Loading...</em></p>
}

@if (areas is not null)
{
<div class="form-group">
    <label for="areaFilter">Filter by Area</label>
    <InputSelect id="areaFilter" class="form-control" @bind-Value="@areaFilter">
        <option value="">All</option>
        @foreach (var area in areas)
        {
            <option value="@area.Id">@area.Name</option>
        }
    </InputSelect>
</div>
}
else
{
    <p><em>Loading...</em></p>
}

<button class="btn btn-primary" @onclick="LoadTaskDefinitions">Filter</button>
<button class="btn btn-primary" @onclick="ResetPage">Clear Filters</button>


<!-- Task Definitions Table -->
@if (taskDefinitions is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Asset</th>
                <th>Area</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var taskDefinition in taskDefinitions)
            {
                <tr>
                    <td><a href="@($"/task-definitions/{taskDefinition.Id}")">@taskDefinition.Name</a></td>
                    <td>@taskDefinition.Asset?.Name</td>
                    <td>@taskDefinition.Area?.Name</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditTaskDefinition(taskDefinition.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTaskDefinition(taskDefinition.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/task-definitions/add"))">New Task Definition</button>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    private List<TaskDefinition>? taskDefinitions;
    private List<Asset>? assets;
    private List<Area>? areas;
    private int? assetFilter;
    private int? areaFilter;

    protected override async Task OnInitializedAsync()
    {
        assets = await AssetService.GetAsync();
        areas = await AreaService.GetAsync();
        await LoadTaskDefinitions();
    }

    private async Task LoadTaskDefinitions()
    {
        taskDefinitions = (await TaskDefinitionService.GetAsync())
            .Where(t => !assetFilter.HasValue || (t.Asset != null && assetFilter == t.Asset.Id))
            .Where(t => !areaFilter.HasValue || (t.Area != null && areaFilter == t.Area.Id))
            .ToList();
    }

    private void EditTaskDefinition(int id)
    {
        NavigationManager.NavigateTo($"/task-definitions/edit/{id}");
    }

    private async Task ResetPage()
    {
        assetFilter = null;
        areaFilter = null;
        await LoadTaskDefinitions();
    }

    private async Task DeleteTaskDefinition(int id)
    {
        await TaskDefinitionService.DeleteAsync(id);
        await LoadTaskDefinitions();
    }
}