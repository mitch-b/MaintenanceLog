@page "/task-definitions/edit/{TaskDefinitionId:int}"

@using MaintenanceLog.Client.Pages.TaskDefinitionSteps
@using MaintenanceLog.Data.Entities
@using MaintenanceLog.Data.Services.Contracts
@using Microsoft.AspNetCore.Authorization

@inject ITaskDefinitionService TaskDefinitionService
@inject ITaskTypeService TaskTypeService
@inject IAssetService AssetService
@inject IAreaService AreaService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Edit Task Definition</PageTitle>

<MenuBreadcrumbs Breadcrumbs=@Breadcrumbs />
<br />

<h3>Edit @taskName</h3>

@if (taskDefinition is not null && areas is not null && assets is not null && taskTypes is not null)
{
    <EditForm Model="@taskDefinition" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Task Type Selection -->
        <div class="form-group">
            <label for="taskType">Task Type</label>
            <InputSelect id="taskType" class="form-control" @bind-Value="taskDefinition.TaskTypeId">
                @foreach (var taskType in taskTypes)
                {
                    <option value="@taskType.Id">@taskType.Name</option>
                }
            </InputSelect>
        </div>

        <!-- Name Field -->
        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="taskDefinition.Name" />
        </div>

        <!-- Asset Selection -->
        <div class="form-group">
            <label for="asset">Asset</label>
            <InputSelect id="asset" class="form-control" @bind-Value="taskDefinition.AssetId">
                @foreach (var asset in assets)
                {
                    <option value="@asset.Id">@asset.Name</option>
                }
            </InputSelect>
        </div>

        <!-- Area Selection -->
        <div class="form-group">
            <label for="area">Area</label>
            <InputSelect id="area" class="form-control" @bind-Value="taskDefinition.AreaId">
                @foreach (var area in areas)
                {
                    <option value="@area.Id">@area.Name</option>
                }
            </InputSelect>
        </div>

        <!-- CronSchedule -->
        <div class="form-group">
            <label for="cronSchedule">Cron Schedule</label>
            <div class="form-check form-switch">    
                <InputCheckbox id="isAdvancedCron" class="form-check-input" @bind-Value="isAdvancedCron" /> Advanced Edit?
            </div>

            <SmartCronScheduleEditor Item="taskDefinition" />

            <!-- if toggle is checked, show InputText -->
            @if (isAdvancedCron)
            {
                <InputText id="cronSchedule" class="form-control" @bind-Value="taskDefinition.CronSchedule" />
            }

            <div>
                @try
                {
                    @if (@CronExpressionDescriptor.ExpressionDescriptor.GetDescription(taskDefinition.CronSchedule ?? "") is not null)
                    {
                        <small class="text-muted">@taskDefinition.Name will run <code>@CronExpressionDescriptor.ExpressionDescriptor.GetDescription(taskDefinition.CronSchedule, new CronExpressionDescriptor.Options { Verbose = true })</code></small>
                    }
                    else
                    {
                        <small class="text-danger">Invalid Cron Expression</small>
                    }
                }
                catch (Exception ex)
                {
                    <small class="text-danger">Invalid Cron Expression: @ex.Message</small>
                }
            </div>
        </div>

        <!-- Submit Button -->
        <div class="pt-5">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </EditForm>

    <TaskDefinitionStepGrid TaskDefinitionId="TaskDefinitionId" />
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    [Parameter]
    public int TaskDefinitionId { get; set; }

    private TaskDefinition? taskDefinition;
    private List<Asset>? assets;
    private List<Area>? areas;
    private List<TaskType>? taskTypes;

    private bool isAdvancedCron = false;

    private List<(string, string?)> Breadcrumbs =>
    [
        ("Task Definitions", "/task-definitions"),
        (taskName, null)
    ];

    private string taskName => taskDefinition?.Name ?? "Task";

    protected override async Task OnInitializedAsync()
    {
        assets = await AssetService.GetAsync();
        areas = await AreaService.GetAsync();
        taskTypes = await TaskTypeService.GetAsync();
        taskDefinition = await TaskDefinitionService.FindAsync(TaskDefinitionId);
    }

    private async Task HandleValidSubmit()
    {
        if (taskDefinition is null)
        {
            return;
        }
        if (string.IsNullOrWhiteSpace(taskDefinition.CronSchedule))
        {
            taskDefinition.CronSchedule = null;
        }
        await TaskDefinitionService.UpdateAsync(taskDefinition);
        NavigationManager.NavigateTo("/task-definitions");
    }
}
