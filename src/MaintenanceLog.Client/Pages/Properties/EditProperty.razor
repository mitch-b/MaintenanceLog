@page "/properties/edit/{id:int}"

@using MaintenanceLog.Data.Entities
@using MaintenanceLog.Data.Services.Contracts

@inject IPropertyService PropertyService
@inject NavigationManager NavigationManager

<PageTitle>Add Property</PageTitle>

<MenuBreadcrumbs Breadcrumbs=@Breadcrumbs />
<br />

<h3>Add Property</h3>

@if (property != null)
{

    <EditForm Model="@property" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="@property.Name" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" class="form-control" @bind-Value="@property.Description" />
        </div>

        <!-- button to save -->
        <button type="submit" class="btn btn-primary">Save</button>

    </EditForm>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Property? property = new Property()
        {
            Name = string.Empty
        };

    private List<(string, string?)> Breadcrumbs =>
    [
        ("Properties", "/properties"),
        ("Add Property", null)
    ];

    protected override async Task OnInitializedAsync()
    {
        property = await PropertyService.FindAsync(Id);
        if (property is null)
        {
            NavigationManager.NavigateTo("/properties");
        }
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (property is null)
        {
            return;
        }
        var updatedProperty = await PropertyService.UpdateAsync(property);
        if (updatedProperty != null)
        {
            NavigationManager.NavigateTo("/properties");
        }
    }

}
