@using MaintenanceLog.Data.Entities
@using MaintenanceLog.Data.Services.Contracts

@inject ITaskDefinitionStepService TaskDefinitionStepService

<button class="btn btn-primary" @onclick="OpenModal">
    + Step
</button>

@if (isModalOpen && taskDefinitionStep is not null)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close" @onclick="CloseModal">&times;</span>
            <p>Add a new Task Definition Step:</p>

            <input type="text" class="form-control" placeholder="Name" @bind="taskDefinitionStep.Name" />
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="isOptionalCheck" @bind="taskDefinitionStep.IsOptional" />
                <label class="form-check-label" for="isOptionalCheck">Is Optional</label>
            </div>

            <button class="btn btn-primary" @onclick="AddTaskDefinitionStep">
                Add
            </button>
        </div>
    </div>
}

<style>

    .modal {
        display: block; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Could be more or less, depending on screen size */
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

</style>

@code {
    [Parameter]
    public int TaskDefinitionId { get; set; }

    private bool isModalOpen = false;
    private TaskDefinitionStep? taskDefinitionStep;

    void OpenModal()
    {
        taskDefinitionStep = new TaskDefinitionStep()
            {
                Name = "",
                TaskDefinitionId = TaskDefinitionId
            };
        isModalOpen = true;
    }

    void CloseModal()
    {
        isModalOpen = false;
    }

    private async Task AddTaskDefinitionStep()
    {
        if (taskDefinitionStep is null)
        {
            return;
        }
        await TaskDefinitionStepService.AddAsync(taskDefinitionStep);
        isModalOpen = false;
    }
}
