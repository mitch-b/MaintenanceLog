@using MaintenanceLog.Common.Extensions
@using MaintenanceLog.Data.Entities
@using MaintenanceLog.Data.Extensions
@using MaintenanceLog.Data.Services.Contracts

@inject IJSRuntime JsRuntime
@inject ITaskDefinitionService TaskDefinitionService
@inject ITaskInstanceService TaskInstanceService
@inject NavigationManager NavigationManager

<!-- Task Definitions Table -->
@if (taskDefinitions != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Start</th>
                <th>Name</th>
                <th>Upcoming</th>
                <th>Asset</th>
                <th>Area</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var taskDefinition in taskDefinitions)
            {
                <tr>
                    <!-- show start icon in a green button -->
                    <td>
                        <button class="btn btn-success" title="Start" @onclick="() => StartTaskInstance(taskDefinition)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-play" viewBox="0 0 16 16">
                                <path d="M10.804 8 5 4.633v6.734zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C4.713 12.69 4 12.345 4 11.692V4.308c0-.653.713-.998 1.233-.696z"/>
                            </svg>
                        </button>
                    </td>
                    <td><a href="@($"/task-definitions/edit/{taskDefinition.Id}")">@taskDefinition.Name</a></td>
                    <td>
                        @if (string.IsNullOrWhiteSpace(taskDefinition.CronSchedule))
                        {
                            <span class="badge bg-danger">Manual</span>
                        }
                        else
                        {
                            <span class="badge bg-info">
                                @taskDefinition.GetNextScheduledDate().ToLocalHumanizedString()
                            </span>
                        }
                    </td>
                    <td>@taskDefinition.Asset?.Name</td>
                    <td>@taskDefinition.Area?.Name</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteTaskDefinition(taskDefinition.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/task-definitions/add"))">New Task Definition</button>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    [Parameter]
    public int? AreaId { get; set; }
    [Parameter]
    public int? AssetId { get; set; }
    [Parameter]
    public EventCallback<bool> OnDataUpdated { get; set; }

    private List<TaskDefinition>? taskDefinitions;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        await LoadTaskDefinitions();
    }

    private async Task LoadTaskDefinitions()
    {
        taskDefinitions = (await TaskDefinitionService.GetAsync())
            .Where(t => !AssetId.HasValue || (t.Asset != null && AssetId == t.Asset.Id))
            .Where(t => !AreaId.HasValue || (t.Area != null && AreaId == t.Area.Id))
            .ToList();
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteTaskDefinition(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await TaskDefinitionService.DeleteAsync(id);
            await LoadTaskDefinitions();
            if (OnDataUpdated.HasDelegate)
            {
                await OnDataUpdated.InvokeAsync(true);
            }
        }
    }

    private async Task StartTaskInstance(TaskDefinition taskDefinition)
    {
        var taskInstance = new TaskInstance
        {
            TaskDefinitionId = taskDefinition.Id,
            StartedOn = DateTimeOffset.UtcNow,
            AutomationMessage = "Started from the web app",
            // Status = TaskInstanceStatus.InProgress
        };
        await TaskInstanceService.AddAsync(taskInstance);
        if (OnDataUpdated.HasDelegate)
        {
            await OnDataUpdated.InvokeAsync(true);
        }
    }
}