@using MaintenanceLog.Data.Entities

@typeparam TItem where TItem : IScheduledEntity



@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="@OnSmartAssist">
        ✨ Smart Scheduler
    </button>

    @if (!string.IsNullOrWhiteSpace(humanizedCronSchedule))
    {
        <div class="alert alert-info" role="alert">
            <strong>Schedule:</strong> @humanizedCronSchedule
        </div>
    }
}

@code
{
    [Parameter]
    public TItem? Item { get; set; }
    [Parameter]
    public EventCallback<TItem> DataChangedAsync { get; set; }

    private string humanizedCronSchedule = string.Empty;
    private string aiResultText = string.Empty;
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Item is null)
        {
            throw new ArgumentNullException(nameof(Item));
        }
        if (!string.IsNullOrWhiteSpace(Item.CronSchedule))
        {
            humanizedCronSchedule = CronExpressionDescriptor.ExpressionDescriptor.GetDescription(Item.CronSchedule ?? "");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task OnSmartAssist()
    {
        var prompts = new List<string>
        {
            $"Given typical situations, how frequently should \"{Item!.Name}\" happen? Please return your response as just a Cron expression.",
            "Do not use any human language.",
            "Assume a person's day starts at 9AM local time."
        };
        var prompt = string.Join(" ", prompts);

        isLoading = true;

        // CronSchedule = await SmartAssistService.GetCronSchedule(ItemName);
        Item.CronSchedule = "30 9 * * TUE";

        humanizedCronSchedule = CronExpressionDescriptor.ExpressionDescriptor.GetDescription(Item.CronSchedule ?? "");
        
        await Task.Delay(1500);

        isLoading = false;

        await InvokeAsync(StateHasChanged);
        await DataChangedAsync.InvokeAsync(Item);


        return;
    }
}
