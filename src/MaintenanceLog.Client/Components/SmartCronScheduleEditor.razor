@using MaintenanceLog.Common.Contracts
@using MaintenanceLog.Data.Entities

@inject ISmartScheduleService SmartScheduleService

@typeparam TItem where TItem : IScheduledEntity

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="@OnSmartAssist">
        ✨ Smart Scheduler
    </button>
}

@code
{
    [Parameter]
    public TItem? Item { get; set; }
    [Parameter]
    public EventCallback<TItem> DataChangedAsync { get; set; }

    private string aiResultText = string.Empty;
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Item is null)
        {
            throw new ArgumentNullException(nameof(Item));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task OnSmartAssist()
    {
        isLoading = true;

        aiResultText = await SmartScheduleService.EstimateCronScheduleForItem(Item.Name);

        if (string.IsNullOrWhiteSpace(aiResultText) == false)
        {
            // loop through each line in response and grab one that looks like a cron expression
            var lines = aiResultText.Split('\n');
            foreach (var line in lines)
            {
                try
                {
                    if (!string.IsNullOrWhiteSpace(CronExpressionDescriptor.ExpressionDescriptor.GetDescription(line)))
                    {
                        Item.CronSchedule = line;
                        break;
                    }
                }
                catch
                {
                    continue;
                }
            }
        }
        else
        {
            // TODO: alert user via JSInterop that AI failed to respond
            Item.CronSchedule = null;
        }

        isLoading = false;

        await InvokeAsync(StateHasChanged);
        await DataChangedAsync.InvokeAsync(Item);

        return;
    }
}
